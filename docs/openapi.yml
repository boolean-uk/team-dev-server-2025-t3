openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: 1.0

servers:
  - url: http://localhost:4000/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user with a unique email.
      operationId: createUser
      requestBody:
        required: true
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: Email already in use
        '500':
          description: Internal server error

    get:
      tags:
        - user
      summary: Get all users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search users by first name (case-sensitive).
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '500':
          description: Internal server error

  /login:
    post:
      tags:
        - user
      summary: User Login
      description: Authenticates a user and returns a token.
      operationId: loginUser
      requestBody:
        required: true
        description: User login information
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@example.com'
                password:
                  type: string
                  format: password
                  example: 'SecurePassword123!'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      role:
                        type: string
        '400':
          description: Invalid username/password supplied
        '500':
          description: Internal server error

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      tags:
        - user
      summary: Update user by ID (Full)
      description: Allows a user to update their own account details.
      operationId: updateUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    patch:
      tags:
        - user
      summary: Partially update a user
      description: Only teachers can update the `cohortId` or `role`. Students can only update their own details.
      operationId: updateUserPartial
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    delete:
      tags:
        - user
      summary: Logout and Delete user by ID
      description: Logs out the user before deleting their own account to prevent session-related crashes.
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User logged out and scheduled for deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User logged out successfully. Account deletion will proceed.'
        '403':
          description: Forbidden - User cannot delete another account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profiles:
    post:
      tags:
        - profile
      summary: Create a new profile
      description: Creates a profile for an existing user.
      operationId: createProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                  nullable: true
                githubUrl:
                  type: string
                  nullable: true
                mobile:
                  type: string
                  nullable: true
                specialism:
                  type: string
                  nullable: true
                startDate:
                  type: string
                  format: date-time
                  nullable: true
                endDate:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        201:
          description: Profile created
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
        404:
          description: User not found
        500:
          description: Internal server error

    get:
      tags:
        - profile
      summary: Get all profiles
      description: Retrieves all profiles with user details.
      operationId: getAllProfiles
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      type: object
        500:
          description: Internal server error

  /profiles/{userId}:
    get:
      tags:
        - profile
      summary: Get a profile by user ID
      description: Retrieves a specific profile based on the user's ID.
      operationId: getProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
        404:
          description: Profile not found
        500:
          description: Internal server error

    put:
      tags:
        - profile
      summary: Update a profile
      description: Updates a specific profile based on the user's ID.
      operationId: updateProfile
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                  nullable: true
                githubUrl:
                  type: string
                  nullable: true
                mobile:
                  type: string
                  nullable: true
                specialism:
                  type: string
                  nullable: true
                startDate:
                  type: string
                  format: date-time
                  nullable: true
                endDate:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        200:
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
        403:
          description: Unauthorized to update profile
        404:
          description: Profile not found
        500:
          description: Internal server error

    delete:
      tags:
        - profile
      summary: Delete a profile
      description: Deletes a specific profile based on the user's ID.
      operationId: deleteProfile
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Profile deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile deleted successfully"
        403:
          description: Unauthorized to delete profile
        404:
          description: Profile not found
        500:
          description: Internal server error

  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/sorted:
    get:
      summary: returns a list of sorted post by recent date
      tags:
        - post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: returns a list of sorted posts by recent date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          description: fail
  /posts/{id}:
    put:
      tags:
        - post
      summary: Update a post
      description: This allows an authenticated user to update their post.
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Post content update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        200:
          description: Successfully updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - post
      summary: Delete a post
      description: This allows an authenticated user to delete their post.
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/mine:
    get:
      summary: Get all posts created by the authenticated user sorted by date
      tags:
        - post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns a list of posts created by the logged-in user sorted by date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized


  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a new cohort and assign users
      description: Creates a new cohort and assigns any users (students or teachers) to it.
      operationId: createCohort
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Create cohort with optional student assignment
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
      responses:
        201:
          description: Cohort created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cohort:
                    type: object
                    description: 'Created cohort object'
                  usersAssigned:
                    type: array
                    items:
                      type: integer
                    description: 'IDs of users assigned to the cohort'
        500:
          description: Internal server error

    get:
      tags:
        - cohort
      summary: Get all cohorts with their users
      description: Retrieves all cohorts, including assigned users (students and teachers).
      operationId: getAllCohorts
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all cohorts with users
          content:
            application/json:
              schema:
                type: object
                properties:
                  cohorts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        users:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              email:
                                type: string
                              role:
                                type: string
                              profile:
                                type: object
                                properties:
                                  firstName:
                                    type: string
                                  lastName:
                                    type: string
        500:
          description: Internal server error

  /cohorts/{id}:
    get:
      tags:
        - cohort
      summary: Get a cohort by id
      description: Gets a single cohort by id if the user is part of the cohort or a teacher
      operationId: getCohort
      parameters:
        - name: id
          in: path
          description: 'The id of the cohort'
          required: true
          schema:
            type: number
      security:
        - bearerAuth: []
      responses:
        200:
          description: Cohort with all its users
          content:
            application/json:
              schema:
                type: object
                properties:
                  cohort:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            email:
                              type: string
                            role:
                              type: string
                            profile:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
        500:
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
          nullable: true
        githubUrl:
          type: string
          nullable: true

    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    PatchUser:
      type: object
      properties:
        email:
          type: string
          nullable: true
        cohortId:
          type: integer
          nullable: true
        role:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        githubUrl:
          type: string
          nullable: true

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
        email:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        githubUrl:
          type: string
          nullable: true
        password:
          type: string
          nullable: true

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohortId:
                        type: integer
                      role:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      bio:
                        type: string
                      githubUrl:
                        type: string
                      profileImageUrl:
                        type: string
    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
